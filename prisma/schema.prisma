// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
  CASHIER
  CHEF
  BRANCH_MANAGER
  HQ_MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  DIGITAL_WALLET
}

enum OrderType {
  DINE_IN
  TAKEAWAY
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  password      String
  role          UserRole
  branchId      String?   // nullable for HQ_MANAGER and CUSTOMER
  branch        Branch?   @relation(fields: [branchId], references: [id])
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]   @relation("CustomerOrders")
  servedOrders  Order[]   @relation("WaiterOrders")
}

model Branch {
  id            String    @id @default(uuid())
  name          String
  address       String
  phone         String
  email         String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  inventory     InventoryItem[]
  orders        Order[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int
  menuItems   MenuItem[]
}

model MenuItem {
  id                     String   @id @default(uuid())
  name                   String
  description            String
  price                  Decimal  @db.Decimal(10,2)
  categoryId             String
  category               Category @relation(fields: [categoryId], references: [id])
  isAvailable            Boolean  @default(true)
  preparationTimeMinutes  Int
  imageUrl               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  orderItems             OrderItem[]
  ingredients            MenuItemIngredient[]
}

model InventoryItem {
  id           String   @id @default(uuid())
  name         String
  unit         String
  currentStock Decimal  @db.Decimal(10,2)
  minimumStock Decimal  @db.Decimal(10,2)
  costPerUnit  Decimal  @db.Decimal(10,2)
  branchId     String
  branch       Branch   @relation(fields: [branchId], references: [id])
  updatedAt    DateTime @updatedAt
  menuIngredients MenuItemIngredient[]
}

model MenuItemIngredient {
  id               String   @id @default(uuid())
  menuItemId       String
  inventoryItemId  String
  quantityRequired Decimal  @db.Decimal(10,2)
  menuItem         MenuItem @relation(fields: [menuItemId], references: [id])
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  customerId      String?
  customer        User?       @relation("CustomerOrders", fields: [customerId], references: [id])
  branchId        String
  branch          Branch      @relation(fields: [branchId], references: [id])
  waiterCashierId String
  waiterCashier   User        @relation("WaiterOrders", fields: [waiterCashierId], references: [id])
  status          OrderStatus
  orderType       OrderType
  tableNumber     String?
  totalAmount     Decimal     @db.Decimal(10,2)
  paymentStatus   PaymentStatus
  paymentMethod   PaymentMethod?
  notes           String?
  orderedAt       DateTime
  confirmedAt     DateTime?
  preparedAt      DateTime?
  servedAt        DateTime?
  orderItems      OrderItem[]
}

model OrderItem {
  id                  String   @id @default(uuid())
  orderId             String
  menuItemId          String
  quantity            Int
  unitPrice           Decimal  @db.Decimal(10,2)
  totalPrice          Decimal  @db.Decimal(10,2)
  specialInstructions String?
  order               Order    @relation(fields: [orderId], references: [id])
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
}
